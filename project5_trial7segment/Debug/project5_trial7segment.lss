
project5_trial7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000001f6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099b  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f0  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c7  00000000  00000000  000013bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000410  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030b  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  8e:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <tampilkanAngka>:
	// b7.b6.b5.b4.b3.b2.b1.b0	-> portC
	
	//       b5.b4.b3.b2.b1.b0	-> portC
	//                   dp. g	-> portB
	
	PORTC = seg_code[angkanya];
  96:	fc 01       	movw	r30, r24
  98:	e0 50       	subi	r30, 0x00	; 0
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	80 81       	ld	r24, Z
  9e:	88 b9       	out	0x08, r24	; 8
	
	temp0 = seg_code[angkanya];
  a0:	80 81       	ld	r24, Z
	temp0 = temp0 >> 6;
  a2:	82 95       	swap	r24
  a4:	86 95       	lsr	r24
  a6:	86 95       	lsr	r24
  a8:	83 70       	andi	r24, 0x03	; 3
	PORTB = temp0;
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	08 95       	ret

000000ae <segment1>:
	baca portB 
	diolah -> s1 / PB2 aja
	keluarkan ke portB 
	*/
	
	temp1 =  PINB;
  ae:	83 b1       	in	r24, 0x03	; 3
	temp1 &= 0b00000011;
  b0:	83 70       	andi	r24, 0x03	; 3
	temp1 |= 0b11111000; //pasti PB2 = '0'
  b2:	88 6f       	ori	r24, 0xF8	; 248
	PORTB =  temp1;
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	08 95       	ret

000000b8 <segment2>:

void segment2 (void)
{
	char temp1;
		
	temp1 =  PINB;
  b8:	83 b1       	in	r24, 0x03	; 3
	temp1 &= 0b00000011;
  ba:	83 70       	andi	r24, 0x03	; 3
	temp1 |= 0b11110100; //pasti PB3 = '0'
  bc:	84 6f       	ori	r24, 0xF4	; 244
	PORTB =  temp1;
  be:	85 b9       	out	0x05, r24	; 5
  c0:	08 95       	ret

000000c2 <segment3>:
}
void segment3 (void)
{
	char temp1;
	
	temp1 =  PINB;
  c2:	83 b1       	in	r24, 0x03	; 3
	temp1 &= 0b00000011;
  c4:	83 70       	andi	r24, 0x03	; 3
	temp1 |= 0b11101100; //pasti PB4 = '0'
  c6:	8c 6e       	ori	r24, 0xEC	; 236
	PORTB =  temp1;
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	08 95       	ret

000000cc <segment4>:
}
void segment4 (void)
{
	char temp1;
	
	temp1 =  PINB;
  cc:	83 b1       	in	r24, 0x03	; 3
	temp1 &= 0b00000011;
  ce:	83 70       	andi	r24, 0x03	; 3
	temp1 |= 0b11011100; //pasti PB5 = '0'
  d0:	8c 6d       	ori	r24, 0xDC	; 220
	PORTB =  temp1;
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	08 95       	ret

000000d6 <main>:
int main(void)
{
	int counterr; // 16 bit = 0-65535 = -32767 -> +32xxx
	int temp, nomor, kumpulinDelay;
	
	DDRB = 0xff;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
  da:	87 b9       	out	0x07, r24	; 7
	
	PORTB = 0x00;
  dc:	15 b8       	out	0x05, r1	; 5
	
//	tampilkanAngka(2);
//	segment1();
	
	counterr = 400; // 0 - 9999
	kumpulinDelay = 0;
  de:	81 2c       	mov	r8, r1
  e0:	91 2c       	mov	r9, r1
	PORTB = 0x00;
	
//	tampilkanAngka(2);
//	segment1();
	
	counterr = 400; // 0 - 9999
  e2:	c0 e9       	ldi	r28, 0x90	; 144
  e4:	d1 e0       	ldi	r29, 0x01	; 1
    while (1) 
    {
		nomor = counterr;
		
		temp = nomor / 1000;
		nomor = nomor % 1000;	//modulus = 245
  e6:	0f 2e       	mov	r0, r31
  e8:	f8 ee       	ldi	r31, 0xE8	; 232
  ea:	af 2e       	mov	r10, r31
  ec:	f3 e0       	ldi	r31, 0x03	; 3
  ee:	bf 2e       	mov	r11, r31
  f0:	f0 2d       	mov	r31, r0
		tampilkanAngka(temp);
		segment4();
		_delay_ms(5);
		
		temp = nomor / 100;		// temp = 2
		nomor = nomor % 100;
  f2:	0f 2e       	mov	r0, r31
  f4:	f4 e6       	ldi	r31, 0x64	; 100
  f6:	cf 2e       	mov	r12, r31
  f8:	d1 2c       	mov	r13, r1
  fa:	f0 2d       	mov	r31, r0
		segment3();
		_delay_ms(5);
		
		temp = nomor / 10; 
		
		tampilkanAngka(temp);
  fc:	0f 2e       	mov	r0, r31
  fe:	fa e0       	ldi	r31, 0x0A	; 10
 100:	ef 2e       	mov	r14, r31
 102:	f1 2c       	mov	r15, r1
 104:	f0 2d       	mov	r31, r0
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x36>
			counterr--;
			if (counterr == 0)
			{
				counterr = 120;
			}
			kumpulinDelay = 0;
 108:	81 2c       	mov	r8, r1
 10a:	91 2c       	mov	r9, r1
    while (1) 
    {
		nomor = counterr;
		
		temp = nomor / 1000;
		nomor = nomor % 1000;	//modulus = 245
 10c:	ce 01       	movw	r24, r28
 10e:	b5 01       	movw	r22, r10
 110:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__divmodhi4>
 114:	8c 01       	movw	r16, r24
		
		tampilkanAngka(temp);
 116:	cb 01       	movw	r24, r22
 118:	0e 94 4b 00 	call	0x96	; 0x96 <tampilkanAngka>
		segment4();
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <segment4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f e1       	ldi	r24, 0x1F	; 31
 122:	9e e4       	ldi	r25, 0x4E	; 78
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x4e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x54>
 12a:	00 00       	nop
		_delay_ms(5);
		
		temp = nomor / 100;		// temp = 2
		nomor = nomor % 100;
 12c:	c8 01       	movw	r24, r16
 12e:	b6 01       	movw	r22, r12
 130:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__divmodhi4>
 134:	8c 01       	movw	r16, r24
		tampilkanAngka(temp);
 136:	cb 01       	movw	r24, r22
 138:	0e 94 4b 00 	call	0x96	; 0x96 <tampilkanAngka>
		segment3();
 13c:	0e 94 61 00 	call	0xc2	; 0xc2 <segment3>
 140:	8f e1       	ldi	r24, 0x1F	; 31
 142:	9e e4       	ldi	r25, 0x4E	; 78
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x6e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x74>
 14a:	00 00       	nop
		_delay_ms(5);
		
		temp = nomor / 10; 
		
		tampilkanAngka(temp);
 14c:	c8 01       	movw	r24, r16
 14e:	b7 01       	movw	r22, r14
 150:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__divmodhi4>
 154:	8c 01       	movw	r16, r24
 156:	cb 01       	movw	r24, r22
 158:	0e 94 4b 00 	call	0x96	; 0x96 <tampilkanAngka>
		segment2();
 15c:	0e 94 5c 00 	call	0xb8	; 0xb8 <segment2>
 160:	8f e1       	ldi	r24, 0x1F	; 31
 162:	9e e4       	ldi	r25, 0x4E	; 78
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x8e>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x94>
 16a:	00 00       	nop
		_delay_ms(5);
		
		nomor = nomor % 10;
		tampilkanAngka(nomor);
 16c:	c8 01       	movw	r24, r16
 16e:	0e 94 4b 00 	call	0x96	; 0x96 <tampilkanAngka>
		segment1();
 172:	0e 94 57 00 	call	0xae	; 0xae <segment1>
 176:	8f e1       	ldi	r24, 0x1F	; 31
 178:	9e e4       	ldi	r25, 0x4E	; 78
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0xa4>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xaa>
 180:	00 00       	nop
		_delay_ms(5);
		
		kumpulinDelay++;
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	89 1a       	sub	r8, r25
 186:	99 0a       	sbc	r9, r25
		if (kumpulinDelay > 2)
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	88 16       	cp	r8, r24
 18c:	91 04       	cpc	r9, r1
 18e:	0c f4       	brge	.+2      	; 0x192 <main+0xbc>
 190:	bd cf       	rjmp	.-134    	; 0x10c <main+0x36>
		{
			counterr--;
 192:	21 97       	sbiw	r28, 0x01	; 1
			if (counterr == 0)
 194:	09 f0       	breq	.+2      	; 0x198 <main+0xc2>
 196:	b8 cf       	rjmp	.-144    	; 0x108 <main+0x32>
			{
				counterr = 120;
			}
			kumpulinDelay = 0;
 198:	81 2c       	mov	r8, r1
 19a:	91 2c       	mov	r9, r1
		if (kumpulinDelay > 2)
		{
			counterr--;
			if (counterr == 0)
			{
				counterr = 120;
 19c:	c8 e7       	ldi	r28, 0x78	; 120
 19e:	d0 e0       	ldi	r29, 0x00	; 0
 1a0:	b5 cf       	rjmp	.-150    	; 0x10c <main+0x36>

000001a2 <__divmodhi4>:
 1a2:	97 fb       	bst	r25, 7
 1a4:	07 2e       	mov	r0, r23
 1a6:	16 f4       	brtc	.+4      	; 0x1ac <__divmodhi4+0xa>
 1a8:	00 94       	com	r0
 1aa:	07 d0       	rcall	.+14     	; 0x1ba <__divmodhi4_neg1>
 1ac:	77 fd       	sbrc	r23, 7
 1ae:	09 d0       	rcall	.+18     	; 0x1c2 <__divmodhi4_neg2>
 1b0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__udivmodhi4>
 1b4:	07 fc       	sbrc	r0, 7
 1b6:	05 d0       	rcall	.+10     	; 0x1c2 <__divmodhi4_neg2>
 1b8:	3e f4       	brtc	.+14     	; 0x1c8 <__divmodhi4_exit>

000001ba <__divmodhi4_neg1>:
 1ba:	90 95       	com	r25
 1bc:	81 95       	neg	r24
 1be:	9f 4f       	sbci	r25, 0xFF	; 255
 1c0:	08 95       	ret

000001c2 <__divmodhi4_neg2>:
 1c2:	70 95       	com	r23
 1c4:	61 95       	neg	r22
 1c6:	7f 4f       	sbci	r23, 0xFF	; 255

000001c8 <__divmodhi4_exit>:
 1c8:	08 95       	ret

000001ca <__udivmodhi4>:
 1ca:	aa 1b       	sub	r26, r26
 1cc:	bb 1b       	sub	r27, r27
 1ce:	51 e1       	ldi	r21, 0x11	; 17
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <__udivmodhi4_ep>

000001d2 <__udivmodhi4_loop>:
 1d2:	aa 1f       	adc	r26, r26
 1d4:	bb 1f       	adc	r27, r27
 1d6:	a6 17       	cp	r26, r22
 1d8:	b7 07       	cpc	r27, r23
 1da:	10 f0       	brcs	.+4      	; 0x1e0 <__udivmodhi4_ep>
 1dc:	a6 1b       	sub	r26, r22
 1de:	b7 0b       	sbc	r27, r23

000001e0 <__udivmodhi4_ep>:
 1e0:	88 1f       	adc	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	5a 95       	dec	r21
 1e6:	a9 f7       	brne	.-22     	; 0x1d2 <__udivmodhi4_loop>
 1e8:	80 95       	com	r24
 1ea:	90 95       	com	r25
 1ec:	bc 01       	movw	r22, r24
 1ee:	cd 01       	movw	r24, r26
 1f0:	08 95       	ret

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
